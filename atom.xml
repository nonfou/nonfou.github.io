<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>徐冲的草稿本</title>
  
  
  <link href="http://nonfou.github.io/atom.xml" rel="self"/>
  
  <link href="http://nonfou.github.io/"/>
  <updated>2022-07-25T15:10:24.036Z</updated>
  <id>http://nonfou.github.io/</id>
  
  <author>
    <name>Chong Xu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mock后端接口</title>
    <link href="http://nonfou.github.io/2022/07/07/Mock%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3/"/>
    <id>http://nonfou.github.io/2022/07/07/Mock%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-07-07T15:01:52.000Z</published>
    <updated>2022-07-25T15:10:24.036Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>后端对于接口数据的Mock</p><ul><li>依赖的子服务</li><li>Feign&#x2F;Dubbo等rpc请求</li><li>第三方接口,天眼查&#x2F;启信宝</li></ul><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>参考两个开源项目实现</p><ol><li><a href="https://github.com/a524631266/jmock">模拟mock.js生成数据</a>，简称 <code>项目1</code></li><li><a href="https://github.com/yinjihuan/fox-mock">基于Agent实现接口mock</a>，简称 <code>项目2</code></li></ol><p><code>项目1</code>可以对mock数据有很好的支持，<code>项目2</code>基于Agent，无侵入的完成接口的代理。由此对两个项目进行了整合。</p><img src="/2022/07/07/Mock%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3/Agent%E4%BB%A3%E7%90%86%E6%B5%81%E7%A8%8B.png" class="" title="Agent代理流程"><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="代理的方法"><a href="#代理的方法" class="headerlink" title="代理的方法"></a>代理的方法</h4><p>针对你想Mock的所有接口，找寻一个共有的前置方法。</p><ul><li>Dubbo调用</li></ul><p><code>org.apache.dubbo.rpc.filter.ConsumerContextFilter.invoke</code></p><ul><li>Feign 调用</li></ul><p><code>feign.SynchronousMethodHandler.invoke</code></p><ul><li>Aop环绕通知拦截</li></ul><p><code>org.springframework.aop.aspectj.AspectJAroundAdvice</code></p><h4 id="匹配Mock规则"><a href="#匹配Mock规则" class="headerlink" title="匹配Mock规则"></a>匹配Mock规则</h4><p><code>项目2</code>中是通过以<code>类名称#方法名称</code>作为名称，以文件的形式去定义Mock的内容。</p><p>为了结合<code>项目1</code>去使用，我们在原有Mock内容的基础上增加了Mock类的路径</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;f_mock_data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;class_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.nonfou.example.dto.BasicInfoDTO&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后使用<code>项目1</code>mock出不同的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">AnnotationMockContext</span>().mock(Class.forName(<span class="string">&quot;$&#123;类路径&#125;&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol><li>思路的打通</li></ol><p>理解使用Agent，明白<code>项目2</code>设计思路，如何结合<code>项目1</code>使用。</p><ol start="2"><li>找到代理方法</li></ol><p>针对我想Mock的接口，通过给所有要代理的接口添加了注解，然后使用Aop去增强，这样所有的接口都会经过Aop的代理方法。</p><ol start="3"><li>NoClassDefFoundError</li></ol><p><a href="https://juejin.cn/post/7067363361368834061/">SpringBoot中agent代理aop方法，实现类隔离加载</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;p&gt;后端对于接口数据的Mock&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;依赖的子服务&lt;/li&gt;
&lt;li&gt;Fe</summary>
      
    
    
    
    
    <category term="Java" scheme="http://nonfou.github.io/tags/Java/"/>
    
    <category term="Mock" scheme="http://nonfou.github.io/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>插入clob到oracle</title>
    <link href="http://nonfou.github.io/2022/05/27/%E6%8F%92%E5%85%A5clob%E5%88%B0oracle/"/>
    <id>http://nonfou.github.io/2022/05/27/%E6%8F%92%E5%85%A5clob%E5%88%B0oracle/</id>
    <published>2022-05-27T13:10:01.000Z</published>
    <updated>2022-10-27T13:13:27.803Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>转移两个库中的一个表数据，此表包含CLOB类型的字段</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>dmp只导出导入一个表的数据</li><li>groovy脚本</li></ul><h3 id="groovy脚本插入CLOB到oracle"><a href="#groovy脚本插入CLOB到oracle" class="headerlink" title="groovy脚本插入CLOB到oracle"></a>groovy脚本插入CLOB到oracle</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CopyData</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Sql targetOracle = Sql.newInstance(</span><br><span class="line">            <span class="string">&quot;jdbc:oracle:thin:@182.16.45.23:1521:orcl&quot;</span>,</span><br><span class="line">            <span class="string">&quot;aaa123&quot;</span>,</span><br><span class="line">            <span class="string">&quot;aaa123&quot;</span>,</span><br><span class="line">            <span class="string">&quot;oracle.jdbc.OracleDriver&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Sql sourceOracle = Sql.newInstance(</span><br><span class="line">            <span class="string">&quot;jdbc:oracle:thin:@196.15.23.45:1521:orcl&quot;</span>,</span><br><span class="line">            <span class="string">&quot;bbb123&quot;</span>,</span><br><span class="line">            <span class="string">&quot;bbb123&quot;</span>,</span><br><span class="line">            <span class="string">&quot;oracle.jdbc.OracleDriver&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">void</span> main(String[] args) &#123;</span><br><span class="line">      List&lt;News&gt; list = originalData();</span><br><span class="line">      insertData(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">void</span> insertData(List&lt;News&gt; list) &#123;</span><br><span class="line">        String sql = </span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">insert into news</span></span><br><span class="line"><span class="string">(id, type, content, title)</span></span><br><span class="line"><span class="string">values</span></span><br><span class="line"><span class="string">(?, ?, ?, ?)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">        PreparedStatement preparedStatement = targetOracle.getConnection().prepareStatement(sql)</span><br><span class="line"></span><br><span class="line">        ListUtil.partition(news, <span class="number">1000</span>).each &#123;</span><br><span class="line">            it.each &#123;newsData -&gt;</span><br><span class="line">                preparedStatement.setLong(<span class="number">1</span>, newsData.id <span class="keyword">as</span> Long)</span><br><span class="line">                preparedStatement.setObject(<span class="number">2</span>, newsData.type)</span><br><span class="line">                preparedStatement.setCharacterStream(<span class="number">3</span>, <span class="keyword">new</span> StringReader(newsData.content.getCharacterStream().text))</span><br><span class="line">                preparedStatement.setObject(<span class="number">4</span>, newsData.title)</span><br><span class="line"></span><br><span class="line">                preparedStatement.addBatch()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            preparedStatement.executeBatch()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> List&lt;News&gt; originalData() &#123;</span><br><span class="line">        <span class="keyword">def</span> result = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> sql = <span class="string">&quot;&quot;&quot; select * from news where ROWNUM &lt; 100000&quot;&quot;&quot;</span></span><br><span class="line">        sourceOracle.eachRow(sql) &#123;</span><br><span class="line">            result.push(<span class="keyword">new</span> News(</span><br><span class="line">                    <span class="symbol">id:</span> it.id,</span><br><span class="line">                    <span class="symbol">type:</span> it.type,</span><br><span class="line">                    <span class="symbol">title:</span> it.title,</span><br><span class="line">                    <span class="symbol">content:</span> it.content</span><br><span class="line">            ))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">News</span> &#123;</span><br><span class="line">        String id</span><br><span class="line">        Integer type</span><br><span class="line">        String title</span><br><span class="line">        Clob content</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://9to5answer.com/insert-clob-into-oracle-database">Insert CLOB into Oracle database</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;转移两个库中的一个表数据，此表包含CLOB类型的字段&lt;/p&gt;
&lt;h3 id=&quot;思考&quot;&gt;&lt;a</summary>
      
    
    
    
    
    <category term="Groovy" scheme="http://nonfou.github.io/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>多线程执行计算</title>
    <link href="http://nonfou.github.io/2022/05/27/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E8%AE%A1%E7%AE%97/"/>
    <id>http://nonfou.github.io/2022/05/27/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E8%AE%A1%E7%AE%97/</id>
    <published>2022-05-27T13:08:02.000Z</published>
    <updated>2022-10-27T13:13:34.376Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>需要查询的数据较多，与数据库交互比较频繁；算法比较复杂，执行速度较慢。</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ol><li>先全部查询出计算所需要的全部数据</li><li>多线程执行计算任务</li><li>聚合计算结果</li></ol><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">List&lt;CompletableFuture&lt;List&lt;ResultValue&gt;&gt;&gt; futureResults = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">List&lt;ResultValue&gt; resultValues = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (OriginalData originalData : originalDatas) &#123;</span><br><span class="line">  <span class="comment">// 使用异步任务，开启多线程计算</span></span><br><span class="line">  CompletableFuture&lt;List&lt;ResultValue&gt;&gt; sceneResults = CompletableFuture.supplyAsync(</span><br><span class="line">      <span class="comment">// 执行计算</span></span><br><span class="line">      () -&gt; executeCalculate(originalData);</span><br><span class="line">      , SpringFactory.getBean(Executor.class)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  futureResults.add(sceneResults);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主线程会等待所有子线程执行结束</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  CompletableFuture.allOf(futureResults.toArray(<span class="keyword">new</span> <span class="title class_">CompletableFuture</span>[<span class="number">0</span>])).join();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  log.error(<span class="string">&quot;计算任务失败&quot;</span>, e)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e.getCause().getMessage());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合计算结果</span></span><br><span class="line"><span class="keyword">for</span> (CompletableFuture&lt;List&lt;ResultValue&gt;&gt; future : futureResults) &#123;</span><br><span class="line">  future.whenComplete((resultList, throwable) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (CollUtil.isNotEmpty(resultList)) &#123;</span><br><span class="line">      resultValues.addAll(resultList);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;需要查询的数据较多，与数据库交互比较频繁；算法比较复杂，执行速度较慢。&lt;/p&gt;
&lt;h3 i</summary>
      
    
    
    
    
    <category term="Java" scheme="http://nonfou.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring异步执行时同步上下文信息</title>
    <link href="http://nonfou.github.io/2022/01/05/Spring%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E6%97%B6%E5%90%8C%E6%AD%A5%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BF%A1%E6%81%AF/"/>
    <id>http://nonfou.github.io/2022/01/05/Spring%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E6%97%B6%E5%90%8C%E6%AD%A5%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BF%A1%E6%81%AF/</id>
    <published>2022-01-05T12:57:16.000Z</published>
    <updated>2022-07-12T13:49:33.785Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>Spring中启用异步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncApplication</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    SpringApplication.run(AsyncApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Async</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">asyncUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 同步用户信息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolConfig</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Bean(&quot;asyncExecutor&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Executor <span class="title function_">taskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    <span class="comment">// 核心线程数（默认线程数）</span></span><br><span class="line">    executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 最大线程数</span></span><br><span class="line">    executor.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 缓冲队列数</span></span><br><span class="line">    executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">// 允许线程空闲时间（单位：默认为秒）</span></span><br><span class="line">    executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">    <span class="comment">// 线程池名前缀</span></span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;taskExecutor-&quot;</span>);</span><br><span class="line">    <span class="comment">// 线程池对拒绝任务的处理策略</span></span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步请求图例</p><p>同步当前线程信息到异步线程中</p><p>实现TaskDecorator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ContextDecorator</span> <span class="keyword">implements</span> <span class="title class_">TaskDecorator</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Runnable <span class="title function_">decorate</span><span class="params">(Runnable runnable)</span> &#123;</span><br><span class="line">    <span class="type">RequestAttributes</span> <span class="variable">context</span> <span class="operator">=</span> RequestContextHolder.currentRequestAttributes();</span><br><span class="line">    <span class="keyword">return</span> () -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        RequestContextHolder.setRequestAttributes(context);</span><br><span class="line">        runnable.run();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        RequestContextHolder.resetRequestAttributes();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolConfig</span> &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Bean(&quot;asyncExecutor&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Executor <span class="title function_">taskExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">    <span class="comment">// 核心线程数（默认线程数）</span></span><br><span class="line">    executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 最大线程数</span></span><br><span class="line">    executor.setMaxPoolSize(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 缓冲队列数</span></span><br><span class="line">    executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">    <span class="comment">// 允许线程空闲时间（单位：默认为秒）</span></span><br><span class="line">    executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">    <span class="comment">// 线程池名前缀</span></span><br><span class="line">    executor.setThreadNamePrefix(<span class="string">&quot;taskExecutor-&quot;</span>);</span><br><span class="line">    <span class="comment">// 线程池对拒绝任务的处理策略</span></span><br><span class="line">    executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());</span><br><span class="line">    <span class="comment">// 增加 TaskDecorator 属性的配置</span></span><br><span class="line">    executor.setTaskDecorator(<span class="keyword">new</span> <span class="title class_">ContextDecorator</span>());</span><br><span class="line">    <span class="keyword">return</span> executor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样异步线程就可以继承同步线程的上下文信息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;Spring中启用异步&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    
    <category term="Spring" scheme="http://nonfou.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>win10设置端口转发</title>
    <link href="http://nonfou.github.io/2022/01/05/win10%E8%AE%BE%E7%BD%AE%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    <id>http://nonfou.github.io/2022/01/05/win10%E8%AE%BE%E7%BD%AE%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</id>
    <published>2022-01-05T12:56:16.000Z</published>
    <updated>2022-07-26T14:29:50.360Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Win10设置端口转发"><a href="#Win10设置端口转发" class="headerlink" title="Win10设置端口转发"></a>Win10设置端口转发</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>        在Win10 wsl系统（ip: 192.168.230.20）中启动了一个服务A，暴露出一个端口：3000，我在本机（ip：172.18.20.166）上访问，即：<a href="http://192.168.230.20:3000/">http://192.168.230.20:3000</a> 没有问题，如果局域网中的其它电脑想要访问服务A，是访问不到的。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>        如果局域网中的其它电脑需要访问本机wsl中启动的服务，则需要设置Win10的端口转发，将访问本机的端口转发到本机内部的wsl系统中</p><ol><li><p>利用Nginx做端口转发</p></li><li><p>利用Win10配置端口转发</p></li></ol><h6 id="Win10配置端口转发"><a href="#Win10配置端口转发" class="headerlink" title="Win10配置端口转发"></a>Win10配置端口转发</h6><p>管理员运行</p><ol><li><p>配置端口转发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># win10监听端口3000，转发到wsl（192.168.23.20）上的端口3000</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenport=3000 connectport=3000 connectaddress=192.168.230.20</span><br></pre></td></tr></table></figure></li><li><p>配置防火墙规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 放行端口3000</span></span><br><span class="line">New-NetFirewallRule -DisplayName <span class="string">&quot;Allow Inbound TCP Port 3000&quot;</span> -Direction Inbound -Action Allow -Protocol TCP -LocalPort 3000</span><br></pre></td></tr></table></figure></li></ol><h6 id="命令参考"><a href="#命令参考" class="headerlink" title="命令参考"></a>命令参考</h6><ol><li><p>查看转发规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy show v4tov4</span><br></pre></td></tr></table></figure></li><li><p>删除端口转发规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenport=3000</span><br></pre></td></tr></table></figure></li><li><p>重置端口转发规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy reset</span><br></pre></td></tr></table></figure></li><li><p>删除防火墙规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Remove-NetFirewallRule -DisplayName <span class="string">&quot;Allow Inbound TCP Port 3000&quot;</span></span><br></pre></td></tr></table></figure></li></ol><p>博客参考</p><p>        <a href="https://logi.im/script/achieving-access-to-files-and-resources-on-the-network-between-win10-and-wsl2.html#:~:text=Win10%20%E6%89%80%E5%9C%A8%E5%B1%80%E5%9F%9F%E7%BD%91%E8%AE%BE%E5%A4%87%E8%AE%BF%E9%97%AE%20WSL2%20%E9%A6%96%E5%85%88%E9%9C%80%E8%A6%81%E7%A1%AE%E4%BF%9D%20Windows%20%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%20WSL2%EF%BC%8C%E6%8E%A5%E7%9D%80%E5%9C%A8%20Windows,%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%A5%E7%AB%99%20%E8%A7%84%E5%88%99%EF%BC%8C%E5%B0%86%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%E5%88%B0%20WSL2%E3%80%82%20%E4%BB%A5%E4%B8%8B%E4%B8%BA%20Powershell%20%E5%91%BD%E4%BB%A4%EF%BC%8C%E9%9C%80%20%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%20%E6%89%A7%E8%A1%8C%E3%80%82">Win10 与 WSL2 间的网络和文件互访 - LOGI</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;Win10设置端口转发&quot;&gt;&lt;a href=&quot;#Win10设置端口转发&quot; class=&quot;headerlink&quot; title=&quot;Win10设置端口转发&quot;&gt;&lt;/a&gt;Win10设置端口转发&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;</summary>
      
    
    
    
    
    <category term="Win" scheme="http://nonfou.github.io/tags/Win/"/>
    
  </entry>
  
  <entry>
    <title>linux交互式脚本</title>
    <link href="http://nonfou.github.io/2022/01/05/linux%E4%BA%A4%E4%BA%92%E5%BC%8F%E8%84%9A%E6%9C%AC/"/>
    <id>http://nonfou.github.io/2022/01/05/linux%E4%BA%A4%E4%BA%92%E5%BC%8F%E8%84%9A%E6%9C%AC/</id>
    <published>2022-01-05T12:55:22.000Z</published>
    <updated>2022-07-26T14:26:24.914Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="安装expect"><a href="#安装expect" class="headerlink" title="安装expect"></a>安装expect</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># debian系</span></span><br><span class="line">sudo apt install expect</span><br></pre></td></tr></table></figure><h3 id="Expect中常用的命令"><a href="#Expect中常用的命令" class="headerlink" title="Expect中常用的命令"></a>Expect中常用的命令</h3><ol><li><p>spawn</p><p>启动新的进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spawn ssh root@192.168.5.23</span><br></pre></td></tr></table></figure></li><li><p>expect</p><p>从进程接收字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spawn ssh root@192.168.5.23</span><br><span class="line">expect <span class="string">&quot;*password:&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结束当前交互进程</span></span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure></li><li><p>send</p><p>向进程发送字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spawn ssh root@192.168.5.23</span><br><span class="line">expect <span class="string">&quot;*password:&quot;</span></span><br><span class="line"><span class="comment"># 添加回车符，执行当前输入</span></span><br><span class="line">send <span class="string">&quot;root\r&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>interact</p><p>结束自动执行，当前进程与用户交互</p></li></ol><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>前端&#x2F;后端 项目本地打包部署到linux</p><h4 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect</span></span><br><span class="line"><span class="built_in">set</span> user <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="built_in">set</span> pass <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="built_in">set</span> ip <span class="string">&quot;192.168.5.23&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">spawn ssh <span class="variable">$user</span>@<span class="variable">$ip</span></span><br><span class="line">expect <span class="string">&quot;*password:&quot;</span></span><br><span class="line">send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span></span><br><span class="line">expect <span class="string">&quot;]#&quot;</span> &#123; send <span class="string">&quot;cd /opt/project1/bin\r&quot;</span> &#125;</span><br><span class="line">expect <span class="string">&quot;]#&quot;</span> &#123; send <span class="string">&quot;exit\r&quot;</span>&#125;</span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy</span></span><br><span class="line">spawn scp [jar路径] <span class="variable">$user</span>@<span class="variable">$ip</span>:/opt/project/cloud/</span><br><span class="line">expect <span class="string">&quot;*password:&quot;</span></span><br><span class="line">send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span></span><br><span class="line">expect eof</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行服务</span></span><br><span class="line">spawn ssh <span class="variable">$user</span>@<span class="variable">$ip</span></span><br><span class="line">expect <span class="string">&quot;*password:&quot;</span></span><br><span class="line">send <span class="string">&quot;<span class="variable">$pass</span>\r&quot;</span></span><br><span class="line">expect <span class="string">&quot;]#&quot;</span> &#123; send <span class="string">&quot;cd /opt/project/cloud\r&quot;</span> &#125;</span><br><span class="line">expect <span class="string">&quot;]#&quot;</span> &#123; send <span class="string">&quot;sh startup.sh\r&quot;</span> &#125;</span><br><span class="line">interact</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;安装expect&quot;&gt;&lt;a href=&quot;#安装expect&quot; class=&quot;headerlink&quot; title=&quot;安装expect&quot;&gt;&lt;/a&gt;安装expect&lt;/h3&gt;&lt;figure class=&quot;highlight</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://nonfou.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>oracle常用命令</title>
    <link href="http://nonfou.github.io/2022/01/05/oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://nonfou.github.io/2022/01/05/oracle%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-01-05T12:53:46.000Z</published>
    <updated>2022-07-26T14:29:05.536Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from dba_users;</span><br></pre></td></tr></table></figure><h3 id="查询表空间"><a href="#查询表空间" class="headerlink" title="查询表空间"></a>查询表空间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from Dba_Tablespaces;</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user gmqqqq cascade ;</span><br></pre></td></tr></table></figure><h3 id="查询文件夹"><a href="#查询文件夹" class="headerlink" title="查询文件夹"></a>查询文件夹</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from SYS.ALL_DIRECTORIES;</span><br></pre></td></tr></table></figure><h3 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create tablespace gfaa datafile &#x27;/home/oracle/app/oracle/oradata/orcl55/gfaa.dbf&#x27; size 3G autoextend on next 1024M maxsize 15G extent management local;</span><br></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">create user aaa identified by aaa default tablespace gfaa;</span><br><span class="line"></span><br><span class="line">grant dba to aaa;</span><br><span class="line"></span><br><span class="line">grant connect,resource to aaa;</span><br><span class="line"></span><br><span class="line">grant select any table to aaa;</span><br><span class="line"></span><br><span class="line">grant delete any table to aaa;</span><br><span class="line"></span><br><span class="line">grant update any table to aaa;</span><br><span class="line"></span><br><span class="line">grant insert any table to aaa;</span><br></pre></td></tr></table></figure><h3 id="断掉用户的数据库连接"><a href="#断掉用户的数据库连接" class="headerlink" title="断掉用户的数据库连接"></a>断掉用户的数据库连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select username,sid,serial#,paddr from v$session where username=&#x27;aaa&#x27;;</span><br><span class="line">alter system kill session &#x27;130,9&#x27;;</span><br></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impdp bbb/bbb@orcl55 DIRECTORY=DATA_PUMP_DIR DUMPFILE=20120115.dmp SCHEMAS=aaa remap_tablespace=bbb:gggg</span><br></pre></td></tr></table></figure><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">expdp 用户名/密码@数据库实例名 directory=导出目录 dumpfile=导出的文件名.dmp logfile=导出的日志名.log</span><br><span class="line">--例：expdp GISDATA/GISDATA@LOCALHOST/orcl directory=dmp dumpfile=GISDATA20200921.dmp logfile=GISDATA20200921.log </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;查询用户&quot;&gt;&lt;a href=&quot;#查询用户&quot; class=&quot;headerlink&quot; title=&quot;查询用户&quot;&gt;&lt;/a&gt;查询用户&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
    <category term="Oracle" scheme="http://nonfou.github.io/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>centos笔记</title>
    <link href="http://nonfou.github.io/2022/01/05/centos%E7%AC%94%E8%AE%B0/"/>
    <id>http://nonfou.github.io/2022/01/05/centos%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-05T12:50:23.000Z</published>
    <updated>2022-07-26T14:24:34.304Z</updated>
    
    <content type="html"><![CDATA[<h3 id="centos设置固定ip"><a href="#centos设置固定ip" class="headerlink" title="centos设置固定ip"></a>centos设置固定ip</h3><span id="more"></span><p>配置文件一般在 &#x2F;etc&#x2F;sysconfig&#x2F; 下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=eth0</span><br><span class="line">UUID=472c3283-9c65-4d3b-a97d-6c69f9fc0541</span><br><span class="line">DEVICE=eth0</span><br><span class="line">ONBOOT=yes</span><br><span class="line">IPADDR=</span><br><span class="line">GATEWAY=</span><br><span class="line">NETMASK=</span><br><span class="line">DNS1=</span><br><span class="line">DNS2=</span><br></pre></td></tr></table></figure><h3 id="查看防火墙某个端口是否开放"><a href="#查看防火墙某个端口是否开放" class="headerlink" title="查看防火墙某个端口是否开放"></a>查看防火墙某个端口是否开放</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-port=3306/tcp</span><br></pre></td></tr></table></figure><h3 id="开放防火墙端口3306"><a href="#开放防火墙端口3306" class="headerlink" title="开放防火墙端口3306"></a>开放防火墙端口3306</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure><p>注意：开放端口后要重启防火墙生效</p><h3 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙端口"><a href="#关闭防火墙端口" class="headerlink" title="关闭防火墙端口"></a>关闭防火墙端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --remove-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="查看防火墙状态"><a href="#查看防火墙状态" class="headerlink" title="查看防火墙状态"></a>查看防火墙状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h3 id="打开防火墙"><a href="#打开防火墙" class="headerlink" title="打开防火墙"></a>打开防火墙</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure><h3 id="开放一段端口"><a href="#开放一段端口" class="headerlink" title="开放一段端口"></a>开放一段端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=40000-45000/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="查看开放的端口列表"><a href="#查看开放的端口列表" class="headerlink" title="查看开放的端口列表"></a>查看开放的端口列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure><h3 id="查看被监听-Listen-的端口"><a href="#查看被监听-Listen-的端口" class="headerlink" title="查看被监听(Listen)的端口"></a>查看被监听(Listen)的端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntp</span><br></pre></td></tr></table></figure><h3 id="检查端口被哪个进程占用"><a href="#检查端口被哪个进程占用" class="headerlink" title="检查端口被哪个进程占用"></a>检查端口被哪个进程占用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp|grep 3306</span><br></pre></td></tr></table></figure><h3 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h3><h4 id="nginx-启动端口限制问题"><a href="#nginx-启动端口限制问题" class="headerlink" title="nginx 启动端口限制问题"></a>nginx 启动端口限制问题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">semanage port -a -t http_port_t -p tcp 88</span><br><span class="line"></span><br><span class="line">semanage port -l | grep 88</span><br></pre></td></tr></table></figure><h4 id="nginx出现错误-Permission-denied-while-connecting-to-upstream的问题"><a href="#nginx出现错误-Permission-denied-while-connecting-to-upstream的问题" class="headerlink" title="nginx出现错误(Permission denied) while connecting to upstream的问题"></a>nginx出现错误(Permission denied) while connecting to upstream的问题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect 1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;centos设置固定ip&quot;&gt;&lt;a href=&quot;#centos设置固定ip&quot; class=&quot;headerlink&quot; title=&quot;centos设置固定ip&quot;&gt;&lt;/a&gt;centos设置固定ip&lt;/h3&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://nonfou.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Nginx转发问题</title>
    <link href="http://nonfou.github.io/2021/08/28/Nginx%E8%BD%AC%E5%8F%91%E9%97%AE%E9%A2%98/"/>
    <id>http://nonfou.github.io/2021/08/28/Nginx%E8%BD%AC%E5%8F%91%E9%97%AE%E9%A2%98/</id>
    <published>2021-08-28T10:41:18.000Z</published>
    <updated>2022-07-12T13:48:49.169Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="Nginx转发接口异常，随机出现404-x2F-200"><a href="#Nginx转发接口异常，随机出现404-x2F-200" class="headerlink" title="Nginx转发接口异常，随机出现404&#x2F;200"></a>Nginx转发接口异常，随机出现404&#x2F;200</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>前端nginx部署，后端单体Spring Boot服务</p><p>重新部署后，当访问页面时，新添加的模块里的接口有时出现404，有时正常返回200。</p><h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>之前遇到过一个差不多的问题，k8s部署应用时，应用存在多实例的情况，而其中一个实例是比较久的代码打包的，访问接口时就出现有时报错有时正常的情况</p><pre class="mermaid">graph TB    A[请求] --> B{"Nginx"}    B -->C["应用实例A"]    B -->D["应用实例B"]</pre><blockquote><p>新添加的接口只存在应用实例B中，当nginx请求转发到应用实例B中，接口正常返回，当nginx请求转发到应用实例A中，接口表现异常</p></blockquote><p>由此，我想到应该是Nginx转发出现了问题。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>先查看日志</p><ol><li><p>nginx访问日志出现了502 552的情况</p></li><li><p>nginx错误日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect() failed (111: Connection refused) while connecting to upstream</span><br></pre></td></tr></table></figure></li></ol><p>应用是单体应用部署，不会是上次遇到的情况。</p><p>搜索了一堆东西……</p><p><a href="https://blog.csdn.net/qq_41672878/article/details/108162622">nginx 交替出现404 和200的问题</a></p><p>查看nginx进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p>果然存在多个master进程，保留一个就好了。</p><pre class="mermaid">graph TB    A[请求] --> B{"Nginx服务器"}    B -->C["Nginx Master A"]    B -->D["Nginx Master B"]    C -->E["应用实例"]    D -->E</pre><blockquote><p>当接口通过master A转发时，找不到匹配的url，表现在页面就是404</p></blockquote><blockquote><p>当接口通过master B转发时，正确匹配到后端url，表现就是200</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;Nginx转发接口异常，随机出现404-x2F-200&quot;&gt;&lt;a href=&quot;#Nginx转发接口异常，随机出现404-x2F-200&quot; class=&quot;headerlink&quot; title=&quot;Nginx转发接口异常，随</summary>
      
    
    
    
    
    <category term="Nginx" scheme="http://nonfou.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux使用小结</title>
    <link href="http://nonfou.github.io/2021/08/15/Linux%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/"/>
    <id>http://nonfou.github.io/2021/08/15/Linux%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/</id>
    <published>2021-08-14T16:08:26.000Z</published>
    <updated>2022-07-12T14:17:16.284Z</updated>
    
    <content type="html"><![CDATA[<p>整理一些Linux(<code>Debian</code>系)软件和问题</p><span id="more"></span><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><blockquote><p><a href="http://get.daocloud.io/#install-docker">http://get.daocloud.io/#install-docker</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><p>docker compose</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install docker-compose</span><br></pre></td></tr></table></figure><p>构建mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mysql根目录</span></span><br><span class="line">mkdir -p ~/Programs/Mysql</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">数据目录</span></span><br><span class="line">mkdir -p ~/Programs/Mysql/data</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置目录</span></span><br><span class="line">mkdir -p ~/Programs/Mysql/conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化脚本目录</span></span><br><span class="line">mkdir -p ~/Porgrams/Mysql/init</span><br><span class="line"></span><br><span class="line">cd ~/Programs/Mysql</span><br></pre></td></tr></table></figure><p><a href="Linux%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/mysql/docker-compose">docker-compose.yaml</a></p><h3 id="命令行翻译"><a href="#命令行翻译" class="headerlink" title="命令行翻译"></a>命令行翻译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install npm</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置淘宝镜像</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">npm install terminal-translate -g</span><br></pre></td></tr></table></figure><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p>Flameshot</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install flameshot</span><br></pre></td></tr></table></figure><h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><p>Albert</p><p><a href="https://albertlauncher.github.io/">官网</a></p><h3 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h3><p>Rime</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install fcitx5-rime</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="将当前用户加入docker组"><a href="#将当前用户加入docker组" class="headerlink" title="将当前用户加入docker组"></a>将当前用户加入docker组</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Couldn’t connect to Docker daemon at http+docker://localunixsocket - is it running?</span><br><span class="line">If it’s at a non-standard location, specify the URL with the DOCKER_HOST environment variable.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo gpasswd -a $&#123;USER&#125; docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将普通用户username加入到docker组</span></span><br><span class="line">sudo gpasswd -a username docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更新docker组</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure><h3 id="grub启动界面乱码"><a href="#grub启动界面乱码" class="headerlink" title="grub启动界面乱码"></a>grub启动界面乱码</h3><ul><li>查看grub下的字体</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ls /boot/grub/fonts/</span><br></pre></td></tr></table></figure><ul><li>修改unicode字体</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/default/grub.d/60_mint-theme.cfg</span><br></pre></td></tr></table></figure><img src="/2021/08/15/Linux%E4%BD%BF%E7%94%A8%E5%B0%8F%E7%BB%93/grub-font.png" class="" title="字体配置">]]></content>
    
    
    <summary type="html">&lt;p&gt;整理一些Linux(&lt;code&gt;Debian&lt;/code&gt;系)软件和问题&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://nonfou.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
